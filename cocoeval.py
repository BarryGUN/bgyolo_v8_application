# -*- coding: UTF-8 -*-
"""
  @Author: mpj
  @Date  : 2022/12/18 20:46
  @version V1.0
"""
import argparse
import os

import pandas as pd
from pycocotools.coco import COCO
from pycocotools.cocoeval import COCOeval


class COCOValidator:

    def __init__(self, args):
        self.args = args

    def _get_task(self, opt_str):
        if opt_str == 'detect':
            return 'bbox'

        if opt_str == 'segment':
            return 'segm'
        if opt_str == 'keypoints':
            return 'keypoints'


    def save(self, stats, folder, name):
        stats_dict = {
            'AP': {
                'all@50-95': stats[0],
                'all@50': stats[1],
                'all@75': stats[2],
                'small@50-95': stats[3],
                'medium@50-95': stats[4],
                'large@50-95': stats[5],

            },

            'AR': {
                'all@50-95': stats[6],
                'all@50': stats[7],
                'all@75': stats[8],
                'small@50-95': stats[9],
                'medium@50-95': stats[10],
                'large@50-95': stats[11],

            }
        }

        pd.DataFrame(stats_dict).to_csv(os.path.join(folder, f'{name}.csv'))

    def eval(self):

        cocoGt = COCO(self.args.anno_json)
        cocoDt = cocoGt.loadRes(self.args.pred_json)

        cocoEval = COCOeval(cocoGt, cocoDt, self._get_task(self.args.task))

        # 执行评估
        cocoEval.evaluate()
        cocoEval.accumulate()
        cocoEval.summarize()

        if self.args.save:
            self.save(cocoEval.stats, self.args.save_folder_path, self.args.name)
            # # project_path = os.path.dirname(os.getcwd())
            # # abs_save_path = os.path.join(project_path, self.args.save_path)
            # if not os.path.exists(self.args.save_folder_path):
            #     os.makedirs(self.args.save_folder_path)
            #
            # with open(os.path.join(self.args.save_folder_path, f"{self.args.name}.txt"), 'w') as f:
            #     f.write(str(cocoEval.stats))
            # if self.args.log:
            #     with open(os.path.join(self.args.save_folder_path, f"{self.args.name}-log.txt"), 'w') as f:
            #         print(cocoEval.stats, file=f)
        #
        # # 打印结果
        return cocoEval.stats


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--anno-json', default='', type=str,
                        help="Path of gt json,coco format, such as data/anno.json")
    parser.add_argument('--pred-json', default='', type=str,
                        help="Path of pred json ,generated by yolov8 validator,  such as runs/predictions.json")
    parser.add_argument('--save-folder-path', type=str, default='run/cocoeval/',
                        help="Folder path path of result")
    parser.add_argument('--name', type=str, default='cocoeval',
                        help="File Name of result")
    parser.add_argument('--save', action='store_true',
                        help="save or not ")
    parser.add_argument('--log', action='store_true',
                        help="save log or not ")
    parser.add_argument('--task', type=str, default='detect',
                        help="[detect, segment, keypoints] ")

    args = parser.parse_args()

    validator = COCOValidator(args)
    validator.eval()
